package runner;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import org.jzy3d.colors.Color;
import org.jzy3d.maths.Coord3d;
import org.jzy3d.plot3d.primitives.LightPoint;

import data.ConstructedData;
import embedding.DirectEmbedder;
import embedding.Embedder;
import embedding.Isomap;
import embedding.measures.Measure;
import frechetDistance.ApproxFrechet;
import frechetDistance.DiscreteFrechet;
import frechetDistance.IntegralDiscreteFrechet;
import frechetDistance.Polygon;

/**
 * This class contains a runner used to display the 3d embedding of the shifted
 * spike dataset.
 *
 * <p>
 * Multiple embedding presets can be selected to view different interesting
 * results. These presets are based on different {@link Embedder}s and
 * {@link Measure}s.
 *
 * <p>
 * The dataset in use is generated using
 * {@link ConstructedData#shiftedSpikes(double, double)}. The parameter values
 * range from -1 to 1. The size of the dataset is just short of 18000
 * {@link Polygon}s.
 *
 * @author Anton Ballmaier
 *
 */
public class ShiftedSpikeScatterPlotRunner extends ScatterPlot {
	/**
	 * Enumeration of the presets available. Each one corresponds to a different
	 * embedding method.
	 *
	 * @author Anton Ballmaier
	 *
	 */
	public static enum Preset {
		DISCRETE_FRECHET_ISOMAP((polygons) -> new Isomap<>(polygons, DiscreteFrechet.getInstance(), 8, 500)),
		DISCRETE_FRECHET_MDS((polygons) -> new DirectEmbedder<>(polygons, DiscreteFrechet.getInstance(), 500)),
		FRECHET_ISOMAP((polygons) -> new Isomap<>(polygons, new ApproxFrechet(), 4, 500)),
		FRECHET_MDS((polygons) -> new DirectEmbedder<>(polygons, new ApproxFrechet(), 500)),
		INTEGRAL_FRECHET_ISOMAP((polygons) -> new Isomap<>(polygons, DiscreteFrechet.getInstance(), 8, 500)),
		INTEGRAL_FRECHET_MDS((polygons) -> new DirectEmbedder<>(polygons, IntegralDiscreteFrechet.getInstance(), 500));

		/**
		 * The internal function allowing for polymorphism. When calling the
		 * {@link #getEmbedder(Polygon[])} method method, this function is called
		 * internally.
		 */
		private final Function<Polygon[], Embedder<Polygon>> getEmbedder;

		/**
		 * Creates a new {@link Preset} from the given getEmbedder
		 * <code>Function</code>.
		 *
		 * @param getEmbedder a <code>Function</code> generating an {@link Embedder}
		 *                    from the given {@link Polygon}s.
		 */
		Preset(Function<Polygon[], Embedder<Polygon>> getEmbedder) {
			this.getEmbedder = getEmbedder;
		}

		/**
		 * Constructs an {@link Embedder} for the given {@link Polygon}s. This embedder
		 * is dependent on the specific {@link Preset} at play.
		 *
		 * @param polygons the {@link Polygon}s to construct the {@link Embedder} for
		 * @return the constructed {@link Embedder} fitting this {@link Preset}
		 */
		public Embedder<Polygon> getEmbedder(Polygon[] polygons) {
			return getEmbedder.apply(polygons);
		}
	}

	/**
	 * Main method making this class a runner for the scatter plot it implements.
	 *
	 * <p>
	 * A {@link ShiftedSpikeScatterPlotRunner}-Instance is initialized and used to
	 * plot the embedding of a generated dataset. The used {@link Preset} can be
	 * changed to view the different predefined embedding methods.
	 *
	 * @param args unused
	 */
	public static void main(String[] args) {
		final ScatterPlot sssp = new ShiftedSpikeScatterPlotRunner(Preset.DISCRETE_FRECHET_MDS);
		sssp.plot();
	}

	/**
	 * The preset for the embedding used for this scatter plot
	 */
	private final Preset preset;

	/**
	 * Constructs a new {@link ShiftedSpikeScatterPlotRunner} object using the given
	 * {@link Preset} for embedding. The point size of the embedded points is fixed
	 * to 1.
	 *
	 * @param preset the {@link Preset} defining the {@link Embedder} used to
	 *               generate points from the dataset
	 */
	public ShiftedSpikeScatterPlotRunner(Preset preset) {
		super(1);
		this.preset = preset;
	}

	/**
	 * Returns the set of <code>LightPoints</code> to be plotted. Every
	 * <code>LightPoint</code> contains information about the position and the color
	 * of a single point.
	 *
	 * <p>
	 * The light points are generated by embedding the {@link Polygon} dataset using
	 * this instances embedding {@link Preset}.
	 *
	 * @return the list of points to be plotted
	 */
	@Override
	protected List<LightPoint> getPoints() {
		final double[][] embedding = getEmbeddingPreset(getDataset(), preset);
		final int size = embedding[0].length;
		final List<LightPoint> points = new ArrayList<>(size);
		for (int i = 0; i < size; i++) {
			points.add(new LightPoint(
					new Coord3d((float) embedding[0][i], (float) embedding[1][i], (float) embedding[2][i]),
					new Color(0, 0, 0)));
		}

		return points;
	}

	/**
	 * Returns the dataset to be embedded.
	 *
	 * @return the dataset to be embedded
	 */
	private Polygon[] getDataset() {
		return ConstructedData.shiftedSpikes(1, 0.015);
	}

	/**
	 * Returns the embedding generated from the {@link Polygon} dataset.
	 *
	 * @param polygons the {@link Polygon}s to be embedded
	 * @param preset   the preset defining the type of {@link Embedder} used
	 * @return the embedding
	 */
	private double[][] getEmbeddingPreset(Polygon[] polygons, Preset preset) {
		return preset.getEmbedder(polygons).embed(3);
	}
}
